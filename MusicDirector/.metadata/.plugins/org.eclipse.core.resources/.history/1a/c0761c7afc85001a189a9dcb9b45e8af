package com.consumer.services;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.awt.List;

import static org.mockito.Mockito.spy;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.amazonaws.services.kms.model.NotFoundException;
import com.consumer.models.MusicDirector;
import com.consumer.models.RatingDetails;

public class MusicDirectorConnectorTest {
	
	@Mock
	MusicDirectorConnector sut;
	
	MusicDirectorConnector spyConnector = spy(new MusicDirectorConnector());

	
	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void registerMusicDirectorTest() {
		final MusicDirector musicDirector = mock(MusicDirector.class) ;
		sut.regMusicDirector(musicDirector);
		verify(sut).regMusicDirector(musicDirector);
		//System.out.println("ji"+spyConnector.getLeaderBoardByRating());
		//assertThat(spyConnector.getLeaderBoardByRating()).isExactlyInstanceOf(List.class);
	}
	
	@Test(expected = NullPointerException.class)
	public void registerMusicDirectorExceptionTest() {
		assertThat(spyConnector.getMusicDirectorByID(0)).isExactlyInstanceOf(MusicDirector.class);
	}
	
	@Test
	public void rateMusicDirectorTest() {
		final RatingDetails ratingDetails = mock(RatingDetails.class);
		sut.rateMusicDirector(ratingDetails);
		verify(sut).rateMusicDirector(ratingDetails);
	}
	
	@Test
	public void updateMusicDirectorDetailsTest() {
		sut.updateMusicDirector(101,100,100,100);
		verify(sut).updateMusicDirector(101,100,100,100);
	}
	
	@Test(expected = NotFoundException.class)
	public void getMusicDirectorByIdTest() {

		when(sut.getMusicDirectorByID(100)).thenReturn(new MusicDirector(100,"SATISH",100,100,100,5.0,5));
		assertThat(sut.getMusicDirectorByID(100)).isExactlyInstanceOf(MusicDirector.class);
		when(sut.getMusicDirectorByID(0)).thenThrow(NotFoundException.class);
		
		assertThat(sut.getMusicDirectorByID(0)).isNotNull();
		
	}
	
}
